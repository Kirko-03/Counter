{"version":3,"sources":["Counter/Counter.tsx","CounterBuilder/Values/MaxValue.tsx","CounterBuilder/Values/SetValue.tsx","CounterBuilder/Values/StartValue.tsx","CounterBuilder/CountBuilder.tsx","App.tsx","reportWebVitals.ts","index.tsx","Counter/Counter.module.css","CounterBuilder/CountBuilder.module.css"],"names":["Counter","value","setValue","maxValue","startValue","remember","useEffect","localStorage","getItem","newValue","JSON","parse","setItem","stringify","buttonStyle","color","background","className","s","counterForm","style","form","disabled","margin","onClick","button","width","MaxValue","max","min","setRemember","setMax","nameBoard","type","borderColor","onChange","e","currentTarget","SetValue","setStart","newMax","start","newStart","StartValue","CountBuilder","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"2OAUaA,EAA2B,SAAC,GAMlC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,WACAC,EACI,EADJA,SAEAC,qBAAU,WACR,IAAIL,EAAQM,aAAaC,QAAQ,SACjC,GAAIP,EAAO,CACT,IAAIQ,EAAWC,KAAKC,MAAMV,GAC1BC,EAASO,MAEV,CAACP,IAEJI,qBAAU,WACRC,aAAaK,QAAQ,QAASF,KAAKG,UAAUZ,MAC5C,CAACA,IAEJ,IAAMa,EAAc,CAClBC,MAAOX,EAAa,GAAKA,EAAaD,EAAW,QAAU,GAC3Da,WACEZ,EAAa,GAAKD,IAAaC,GAAcA,EAAaD,EACtD,MACA,SAkBR,OACE,sBAAKc,UAAWC,IAAEC,YAAlB,UACE,qBACEF,UAAWC,IAAEjB,MACbmB,MAAO,CAELL,MACGd,GAASE,IAAaE,GACvBF,GAAYC,GACXH,IAAUG,IAAeC,GAC1BD,EAAa,EACT,MACA,IAVV,SAVEA,EAAa,GAAKD,GAAYC,EACzB,kBACEC,EACF,+BAEAJ,IAoBP,sBAAKgB,UAAWC,IAAEG,KAAlB,UACE,wBACEC,SACEjB,GACAJ,GAASE,GACTC,EAAa,GACbA,IAAeD,EAEjBiB,MACEN,GAAe,CACbE,WAAYf,GAASE,EAAW,MAAQ,QACxCoB,OAAQ,QAGZC,QA9CQ,WACdvB,GAASE,GAAYD,EAASD,EAAQ,IA8ChCgB,UAAWC,IAAEO,OAdf,iBAkBA,wBACEH,SAAUjB,GAAYJ,GAASG,GAAcA,EAAa,EAC1DgB,MACEN,GAAe,CACbE,WACEf,GAASG,GAAcA,IAAeD,GAAYC,EAAa,EAC3D,MACA,SAGVoB,QA1DQ,WACdvB,EAAQG,GAAcF,EAASD,EAAQ,IA0DjCgB,UAAWC,IAAEO,OAXf,iBAeA,wBACED,QAAS,kBAAItB,EAASE,IACtBgB,MAAO,CAAEM,MAAO,QAChBJ,SAAUjB,GAAYJ,IAAUG,EAChCa,UAAWC,IAAEO,OAJf,0B,gBC7FKE,EAAuB,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,IAAIC,EAA4B,EAA5BA,IAAIC,EAAwB,EAAxBA,YAAYC,EAAY,EAAZA,OAKtD,OAAO,sBAAKd,UAAWC,IAAEc,UAAlB,uBACM,uBAAOC,KAAM,SAAUhB,UAAWC,IAAEjB,MAAOmB,MAAO,CAACJ,WAAWa,IAAMD,GAAKC,EAAID,GAAKA,EAAI,EAAE,gBAAgB,OAAOM,YAAYL,IAAMD,GAAKC,EAAID,GAAKA,EAAI,EAAE,MAAM,IAAK3B,MAAO2B,EAAMO,SALvK,SAACC,GAChBL,GAAQK,EAAEC,cAAcpC,OACxB6B,GAAY,UCDPQ,EAA6B,SAAC,GAQpC,IAPLnC,EAOI,EAPJA,SACAC,EAMI,EANJA,WACA0B,EAKI,EALJA,YACAzB,EAII,EAJJA,SACAH,EAGI,EAHJA,SACA6B,EAEI,EAFJA,OACAQ,EACI,EADJA,SAEAjC,qBAAU,WACR,IAAIsB,EAAMrB,aAAaC,QAAQ,YAC/B,GAAIoB,EAAK,CACP,IAAIY,EAAS9B,KAAKC,MAAMiB,GACxBG,EAAOS,GAET,IAAIC,EAAQlC,aAAaC,QAAQ,cACjC,GAAIiC,EAAO,CACT,IAAIC,EAAWhC,KAAKC,MAAM8B,GAC1BF,EAASG,MAEV,CAACH,EAAUR,IAEdzB,qBAAU,WACRC,aAAaK,QAAQ,WAAYF,KAAKG,UAAUV,IAChDI,aAAaK,QAAQ,aAAcF,KAAKG,UAAUT,MACjD,CAACD,EAAUC,IAMd,OACE,8BACE,wBACEkB,UAAWjB,GAAYD,EAAa,GAAKA,IAAeD,EACxDqB,QARU,WACdM,GAAY,GACZ5B,EAASE,IAOLa,UAAWC,IAAEO,OACbL,MAAO,CAAEJ,WAAY,cAJvB,oBCnCO2B,EAA0B,SAAC,GAAyC,IAAxCF,EAAuC,EAAvCA,MAAOF,EAAgC,EAAhCA,SAAUX,EAAsB,EAAtBA,IAAKE,EAAiB,EAAjBA,YAM3D,OAAO,sBAAKb,UAAWC,IAAEc,UAAlB,yBACS,uBAAOC,KAAM,SAAUhB,UAAWC,IAAEjB,MAAOmB,MAAO,CAC9DJ,WAAYyB,EAAQ,GAAKA,IAAUb,GAAOa,EAAQb,EAAM,gBAAkB,OAC1EM,YAAaO,EAAQ,GAAKA,IAAUb,GAAOa,EAAQb,EAAM,MAAQ,IAClE3B,MAAOwC,EAAON,SATI,SAACC,GAClBG,GAAUH,EAAEC,cAAcpC,OAC1B6B,GAAY,UCIPc,EAAgC,SAAC,GAAmE,IAAlEhB,EAAiE,EAAjEA,IAAKG,EAA4D,EAA5DA,OAAQU,EAAoD,EAApDA,MAAOF,EAA6C,EAA7CA,SAAUT,EAAmC,EAAnCA,YAAYzB,EAAuB,EAAvBA,SAASH,EAAc,EAAdA,SAE9F,OAAO,sBAAKe,UAAWC,IAAEC,YAAlB,UACH,cAAC,EAAD,CAAUW,YAAaA,EAAazB,SAAUA,EAAUuB,IAAKA,EAAKG,OAAQA,EAAQF,IAAKY,IACvF,cAAC,EAAD,CAAYX,YAAaA,EAAaW,MAAOA,EAAOF,SAAUA,EAAUX,IAAKA,IAC7E,cAAC,EAAD,CAAWxB,WAAYqC,EAAOF,SAAUA,EAAUR,OAAQA,EAAQ7B,SAAUA,EAAU4B,YAAaA,EAAazB,SAAUA,EAAUF,SAAUyB,QCcvIiB,MA/Bf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACN7C,EADM,KACCC,EADD,OAES4C,mBAAS,IAFlB,mBAENlB,EAFM,KAEDG,EAFC,OAGae,mBAAS,GAHtB,mBAGNL,EAHM,KAGCF,EAHD,OAImBO,oBAAS,GAJ5B,mBAINzC,EAJM,KAIIyB,EAJJ,KAMb,OACE,qBAAKb,UAAU,MAAf,SACE,sBAAKA,UAAU,aAAf,UACE,cAAC,EAAD,CACEhB,MAAOA,EACPC,SAAUA,EACVG,SAAUA,EACVyB,YAAaA,EACbW,MAAOA,EACPF,SAAUA,EACVR,OAAQA,EACRH,IAAKA,IAEP,cAAC,EAAD,CACE3B,MAAOA,EACPI,SAAUA,EACVH,SAAUA,EACVC,SAAUyB,EACVxB,WAAYqC,UCfPM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCFdQ,IAASC,OACL,cAAC,IAAD,UACF,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAGFC,SAASC,eAAe,SAM1Bb,K,kBClBAc,EAAOC,QAAU,CAAC,YAAc,6BAA6B,KAAO,sBAAsB,MAAQ,uBAAuB,OAAS,0B,kBCAlID,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,UAAY,mC","file":"static/js/main.19ed1575.chunk.js","sourcesContent":["import s from \"./Counter.module.css\";\r\nimport { FC, useEffect } from \"react\";\r\n\r\ntype CounterType = {\r\n  value: number;\r\n  setValue: (value: number) => void;\r\n  maxValue: number;\r\n  startValue: number;\r\n  remember: boolean;\r\n};\r\nexport const Counter: FC<CounterType> = ({\r\n  value,\r\n  setValue,\r\n  maxValue,\r\n  startValue,\r\n  remember,\r\n}) => {\r\n  useEffect(() => {\r\n    let value = localStorage.getItem(\"value\");\r\n    if (value) {\r\n      let newValue = JSON.parse(value);\r\n      setValue(newValue);\r\n    }\r\n  }, [setValue]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"value\", JSON.stringify(value));\r\n  }, [value]);\r\n\r\n  const buttonStyle = {\r\n    color: startValue < 0 || startValue > maxValue ? \"black\" : \"\",\r\n    background:\r\n      startValue < 0 || maxValue === startValue || startValue > maxValue\r\n        ? \"red\"\r\n        : \"green\",\r\n  };\r\n\r\n  const incFunc = () => {\r\n    value <= maxValue && setValue(value + 1);\r\n  };\r\n  const decFunc = () => {\r\n    value > startValue && setValue(value - 1);\r\n  };\r\n  const scoreboard = () => {\r\n    if (startValue < 0 || maxValue <= startValue) {\r\n      return \"Incorrect value\";\r\n    } else if (remember) {\r\n      return \"enter values and press 'set'\";\r\n    } else {\r\n      return value;\r\n    }\r\n  };\r\n  return (\r\n    <div className={s.counterForm}>\r\n      <div\r\n        className={s.value}\r\n        style={{\r\n          // eslint-disable-next-line no-mixed-operators\r\n          color:\r\n            (value >= maxValue && !remember) ||\r\n            maxValue <= startValue ||\r\n            (value === startValue && !remember) ||\r\n            startValue < 0\r\n              ? \"red\"\r\n              : \"\",\r\n        }}\r\n      >\r\n        {scoreboard()}\r\n      </div>\r\n      <div className={s.form}>\r\n        <button\r\n          disabled={\r\n            remember ||\r\n            value >= maxValue ||\r\n            startValue < 0 ||\r\n            startValue === maxValue\r\n          }\r\n          style={\r\n            buttonStyle && {\r\n              background: value >= maxValue ? \"red\" : \"green\",\r\n              margin: \"10px\",\r\n            }\r\n          }\r\n          onClick={incFunc}\r\n          className={s.button}\r\n        >\r\n          inc\r\n        </button>\r\n        <button\r\n          disabled={remember || value <= startValue || startValue < 0}\r\n          style={\r\n            buttonStyle && {\r\n              background:\r\n                value <= startValue || startValue === maxValue || startValue < 0\r\n                  ? \"red\"\r\n                  : \"green\",\r\n            }\r\n          }\r\n          onClick={decFunc}\r\n          className={s.button}\r\n        >\r\n          dec\r\n        </button>\r\n        <button\r\n          onClick={()=>setValue(startValue)}\r\n          style={{ width: \"80px\" }}\r\n          disabled={remember || value === startValue}\r\n          className={s.button}\r\n        >\r\n          reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import {ChangeEvent, FC} from \"react\";\r\nimport s from  './../CountBuilder.module.css'\r\ntype MaxType = {\r\n    max:number\r\n    min:number\r\n    remember: boolean\r\n    setRemember: (remember: boolean) => void\r\n    setMax:(max:number)=>void\r\n}\r\n\r\nexport const MaxValue:FC<MaxType> = ({max,min,setRemember,setMax}) => {\r\n    const rememberFunc=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setMax(+e.currentTarget.value)\r\n        setRemember(true)\r\n    }\r\n    return <div className={s.nameBoard}>\r\n       Max value <input type={'number'} className={s.value} style={{background:min===max||min>max||max<0?'rebeccapurple':'cyan',borderColor:min===max||min>max||max<0?'red':''}} value={max}  onChange={rememberFunc}/>\r\n    </div>\r\n}","import s from \"./../../Counter/Counter.module.css\";\r\nimport { FC, useEffect } from \"react\";\r\n\r\ntype SetValueType = {\r\n  setRemember: (remember: boolean) => void;\r\n  remember: boolean;\r\n  maxValue: number;\r\n  startValue: number;\r\n  setValue: (value: number) => void;\r\n  setMax: (maxValue: number) => void;\r\n  setStart: (startValue: number) => void;\r\n};\r\nexport const SetValue: FC<SetValueType> = ({\r\n  maxValue,\r\n  startValue,\r\n  setRemember,\r\n  remember,\r\n  setValue,\r\n  setMax,\r\n  setStart,\r\n}) => {\r\n  useEffect(() => {\r\n    let max = localStorage.getItem(\"maxValue\");\r\n    if (max) {\r\n      let newMax = JSON.parse(max);\r\n      setMax(newMax);\r\n    }\r\n    let start = localStorage.getItem(\"startValue\");\r\n    if (start) {\r\n      let newStart = JSON.parse(start);\r\n      setStart(newStart);\r\n    }\r\n  }, [setStart, setMax]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"maxValue\", JSON.stringify(maxValue));\r\n    localStorage.setItem(\"startValue\", JSON.stringify(startValue));\r\n  }, [maxValue, startValue]);\r\n\r\n  const remFunc = () => {\r\n    setRemember(false);\r\n    setValue(startValue);\r\n  };\r\n  return (\r\n    <div>\r\n      <button\r\n        disabled={!remember || startValue < 0 || startValue === maxValue}\r\n        onClick={remFunc}\r\n        className={s.button}\r\n        style={{ background: \"blueviolet\" }}\r\n      >\r\n        Set\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import {ChangeEvent, FC} from \"react\"\r\nimport s from './../CountBuilder.module.css'\r\n\r\ntype MinType = {\r\n    start: number\r\n    setStart: (min: number) => void\r\n    setRemember: (remember: boolean) => void\r\n    max: number\r\n}\r\n\r\nexport const StartValue: FC<MinType> = ({start, setStart, max, setRemember}) => {\r\n    const rememberFunc = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStart(+e.currentTarget.value)\r\n        setRemember(true)\r\n    }\r\n\r\n    return <div className={s.nameBoard}>\r\n        Start value <input type={'number'} className={s.value} style={{\r\n        background: start < 0 || start === max || start > max ? 'rebeccapurple' : 'cyan',\r\n        borderColor: start < 0 || start === max || start > max ? 'red' : ''\r\n    }} value={start} onChange={rememberFunc}/>\r\n    </div>\r\n}","import s from './../Counter/Counter.module.css'\r\nimport {MaxValue} from \"./Values/MaxValue\";\r\nimport {FC} from \"react\";\r\nimport {SetValue} from './Values/SetValue';\r\nimport {StartValue} from \"./Values/StartValue\";\r\n\r\ntype BuilderType = {\r\n    max: number\r\n    remember: boolean\r\n    setRemember: (remember: boolean) => void\r\n    setMax: (max: number) => void\r\n    start: number\r\n setValue:(value:number)=>void\r\n    setStart: (min: number) => void\r\n    value: number\r\n}\r\n\r\nexport const CountBuilder: FC<BuilderType> = ({max, setMax, start, setStart, setRemember,remember,setValue}) => {\r\n\r\n    return <div className={s.counterForm}>\r\n        <MaxValue setRemember={setRemember} remember={remember} max={max} setMax={setMax} min={start}/>\r\n        <StartValue setRemember={setRemember} start={start} setStart={setStart} max={max}/>\r\n        <SetValue  startValue={start} setStart={setStart} setMax={setMax} setValue={setValue} setRemember={setRemember} remember={remember} maxValue={max}/>\r\n    </div>\r\n}","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Counter } from \"./Counter/Counter\";\nimport { CountBuilder } from \"./CounterBuilder/CountBuilder\";\n\nfunction App() {\n  const [value, setValue] = useState(0);\n  const [max, setMax] = useState(10);\n  const [start, setStart] = useState(0);\n  const [remember, setRemember] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <CountBuilder\n          value={value}\n          setValue={setValue}\n          remember={remember}\n          setRemember={setRemember}\n          start={start}\n          setStart={setStart}\n          setMax={setMax}\n          max={max}\n        />\n        <Counter\n          value={value}\n          remember={remember}\n          setValue={setValue}\n          maxValue={max}\n          startValue={start}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterForm\":\"Counter_counterForm__3dQON\",\"form\":\"Counter_form__3d3eQ\",\"value\":\"Counter_value__2081a\",\"button\":\"Counter_button__SQsxO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value\":\"CountBuilder_value__223TF\",\"nameBoard\":\"CountBuilder_nameBoard__3zz1Y\"};"],"sourceRoot":""}