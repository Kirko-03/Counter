{"version":3,"sources":["Counter.module.css","CountBilder.module.css","Counter.tsx","MaxValue.tsx","MinValue.tsx","SetValue.tsx","CountBilder.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Counter","value","setValue","maxValue","minValue","buttonStyle","color","background","className","s","counterForm","style","form","disabled","margin","onClick","button","MaxValue","max","setMax","min","type","borderColor","onChange","e","currentTarget","MinValue","setMin","SetValue","width","height","marginTop","CountBuilder","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f40da65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterForm\":\"Counter_counterForm__17_Qg\",\"form\":\"Counter_form__CLvbw\",\"value\":\"Counter_value__2KXLN\",\"button\":\"Counter_button__nUAfb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CountBilder_form__QrdS_\"};","import s from './Counter.module.css'\r\nimport {FC} from \"react\";\r\n\r\ntype CounterType = {\r\n    value: number\r\n    setValue: (value: number) => void\r\n    maxValue: number\r\n    minValue: number\r\n}\r\nexport const Counter: FC<CounterType> = ({value, setValue, maxValue, minValue}) => {\r\n\r\n    const buttonStyle = {\r\n        color: minValue < 0 || minValue > maxValue ? 'black' : '',\r\n        background: minValue < 0 || maxValue === minValue || minValue > maxValue ? 'red' : 'green'\r\n    }\r\n\r\n    const incFunc = () => {\r\n        if (value <= maxValue) {\r\n            setValue(value + 1)\r\n        }\r\n    }\r\n    const decFunc = () => {\r\n        if (value > minValue) {\r\n            setValue(value - 1)\r\n        }\r\n    }\r\n    return <div className={s.counterForm}>\r\n        <div className={s.value}\r\n             style={{\r\n                 color: value >= maxValue || value <= minValue || maxValue === minValue\r\n                 || minValue < 0 ? 'red' : ''\r\n             }}>\r\n            {minValue < 0 || maxValue < 0 || maxValue === minValue || minValue > maxValue ? 'Incorrect value!' : value}</div>\r\n        <div className={s.form}>\r\n            <button disabled={value >= maxValue || minValue < 0}\r\n                    style={buttonStyle && {background: value >= maxValue ? 'red' : 'green', margin: '10px'}}\r\n                    onClick={incFunc} className={s.button}>inc\r\n            </button>\r\n            <button disabled={value <= minValue || minValue < 0}\r\n                    style={buttonStyle && {background: value <= minValue ? 'red' : 'green'}} onClick={decFunc}\r\n                    className={s.button}>dec\r\n            </button>\r\n        </div>\r\n    </div>\r\n}","import {FC} from \"react\";\r\n\r\ntype MaxType = {\r\n    max:number\r\n    min:number\r\n    setMax:(max:number)=>void\r\n}\r\n\r\nexport const MaxValue:FC<MaxType> = ({max,setMax,min}) => {\r\n    return <div>\r\n       Max <input type={'number'} style={{background:min===max||min>max||max<0?'rebeccapurple':'',borderColor:min===max||min>max||max<0?'red':''}} value={max} onChange={(e)=>setMax(+e.currentTarget.value)}/>\r\n    </div>\r\n}","import { FC } from \"react\"\r\n\r\ntype MinType = {\r\n    min:number\r\n    setMin:(min:number)=>void\r\n    max:number\r\n}\r\n\r\nexport const MinValue:FC<MinType> = ({min,setMin,max}) => {\r\n    return <div>\r\n        Min <input type={'number'} style={{background:min<0||min===max||min>max?'rebeccapurple':'',borderColor:min<0||min===max||min>max?'red':''}} value={min} onChange={(e)=>setMin(+e.currentTarget.value)}/>\r\n    </div>\r\n}","export const SetValue = () =>{\r\n    return <div>\r\n        <button style={{background:'dodgerblue',width:'70px',height:'40px',marginTop:'10px'}}>Set Value</button>\r\n    </div>\r\n}","import s from './CountBilder.module.css'\r\nimport {MaxValue} from \"./MaxValue\";\r\nimport {MinValue} from \"./MinValue\";\r\nimport {FC} from \"react\";\r\nimport { SetValue } from './SetValue';\r\ntype BuilderType={\r\n    max:number\r\n    setMax:(max:number)=>void\r\n    min:number\r\n    setMin:(min:number)=>void\r\n}\r\n\r\nexport const CountBuilder:FC<BuilderType> = ({max,setMax,min,setMin}) => {\r\n\r\n    return <div className={s.counterForm}>\r\n        <MaxValue max={max} setMax={setMax} min={min}/>\r\n        <MinValue min={min} setMin={setMin} max={max}/>\r\n        <SetValue />\r\n    </div>\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter\";\nimport { CountBuilder} from './CountBilder';\n\nfunction App() {\n    const [value,setValue] = useState(0)\n    const [max,setMax] = useState(10)\n    const [min,setMin] = useState(0)\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <CountBuilder min={min} setMin={setMin} setMax={setMax} max={max} />\n          <Counter value={value} setValue={setValue} maxValue={max} minValue={min}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}