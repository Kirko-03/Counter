{"version":3,"sources":["Counter.module.css","CountBilder.module.css","Counter.tsx","MaxValue.tsx","SetValue.tsx","StartValue.tsx","CountBilder.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Counter","value","setValue","maxValue","startValue","remember","useEffect","localStorage","getItem","newValue","JSON","parse","setItem","stringify","buttonStyle","color","background","className","s","counterForm","style","form","disabled","margin","onClick","button","width","MaxValue","max","min","setRemember","setMax","type","borderColor","onChange","e","currentTarget","SetValue","setStart","newMax","start","newStart","StartValue","CountBuilder","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7461a0a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterForm\":\"Counter_counterForm__17_Qg\",\"form\":\"Counter_form__CLvbw\",\"value\":\"Counter_value__2KXLN\",\"button\":\"Counter_button__nUAfb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CountBilder_form__QrdS_\"};","import s from './Counter.module.css'\r\nimport {FC, useEffect} from \"react\";\r\n\r\n\r\ntype CounterType = {\r\n    value: number\r\n    setValue: (value: number) => void\r\n    maxValue: number\r\n    startValue: number\r\n    remember:boolean\r\n}\r\nexport const Counter: FC<CounterType> = ({value, setValue, maxValue, startValue,remember}) => {\r\n\r\n    useEffect(()=>{\r\n       let value = localStorage.getItem('value')\r\n        if(value){\r\n            let newValue = JSON.parse(value)\r\n            setValue(newValue)\r\n        }\r\n    },[setValue])\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem('value',JSON.stringify(value))\r\n    },[value])\r\n\r\n    const buttonStyle = {\r\n        color: startValue < 0 || startValue > maxValue ? 'black' : '',\r\n        background: startValue < 0 || maxValue === startValue || startValue > maxValue ? 'red' : 'green'\r\n    }\r\n\r\n    const incFunc = () => {\r\n        if (value <= maxValue) {\r\n            setValue(value + 1)\r\n        }\r\n    }\r\n    const decFunc = () => {\r\n        if (value > startValue) {\r\n            setValue(value - 1)\r\n        }\r\n    }\r\n    const scoreboard = () =>{\r\n        if(startValue < 0||maxValue<=startValue){\r\n            return 'Incorrect value'\r\n        }\r\n        else if(remember){\r\n            return \"enter values and press 'set'\"\r\n        }\r\n        else{\r\n            return  value\r\n        }\r\n    }\r\n    const reset = () => {\r\n        setValue(startValue)\r\n    }\r\n    return <div className={s.counterForm}>\r\n        <div className={s.value}\r\n             style={{\r\n                 color: value >= maxValue  || maxValue === startValue\r\n                 || startValue < 0 ? 'red' : ''\r\n             }}>\r\n            {scoreboard()}</div>\r\n        <div className={s.form}>\r\n            <button disabled={remember||value >= maxValue || startValue < 0 || startValue === maxValue}\r\n                    style={buttonStyle && {background: value >= maxValue ? 'red' : 'green', margin: '10px'}}\r\n                    onClick={incFunc} className={s.button}>inc\r\n            </button>\r\n            <button disabled={remember||value <= startValue || startValue < 0 }\r\n                    style={buttonStyle && {background: value <= startValue || startValue === maxValue || startValue < 0 ? 'red' : 'green'}}\r\n                    onClick={decFunc}\r\n                    className={s.button}>dec\r\n            </button>\r\n            <button onClick={reset} style={{width:'80px'}}\r\n                     disabled={remember||value===startValue}\r\n                    className={s.button}>reset\r\n            </button>\r\n        </div>\r\n    </div>\r\n}","import {ChangeEvent, FC} from \"react\";\r\n\r\ntype MaxType = {\r\n    max:number\r\n    min:number\r\n    remember: boolean\r\n    setRemember: (remember: boolean) => void\r\n    setMax:(max:number)=>void\r\n}\r\n\r\nexport const MaxValue:FC<MaxType> = ({max,min,setRemember,setMax}) => {\r\n    const rememberFunc=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setMax(+e.currentTarget.value)\r\n        setRemember(true)\r\n    }\r\n    return <div>\r\n       Max value <input type={'number'} style={{background:min===max||min>max||max<0?'rebeccapurple':'',borderColor:min===max||min>max||max<0?'red':''}} value={max}  onChange={rememberFunc}/>\r\n    </div>\r\n}","import s from './Counter.module.css'\r\nimport {FC, useEffect} from \"react\";\r\n\r\ntype SetValueType={\r\n    setRemember:(remember:boolean)=>void\r\n    remember:boolean\r\n    maxValue:number\r\n    startValue:number\r\n    setValue:(value:number)=>void\r\n    setMax:(maxValue:number)=>void\r\n    setStart:(startValue:number)=>void\r\n}\r\nexport const SetValue:FC<SetValueType> = ({maxValue,startValue,setRemember,remember,setValue,setMax,setStart}) =>{\r\n\r\n    useEffect(()=>{\r\n        let max = localStorage.getItem('maxValue')\r\n        if(max){\r\n            let newMax = JSON.parse(max)\r\n            setMax(newMax)\r\n        }\r\n        let start = localStorage.getItem('startValue')\r\n        if(start){\r\n            let newStart = JSON.parse(start)\r\n            setStart(newStart)\r\n        }\r\n    },[setStart,setMax])\r\n\r\n    useEffect(()=>{\r\n         localStorage.setItem('maxValue',JSON.stringify(maxValue))\r\n        localStorage.setItem('startValue',JSON.stringify(startValue))\r\n    },[maxValue,startValue])\r\n\r\n    const remFunc=()=>{\r\n        setRemember(false)\r\n\r\n        setValue(startValue)\r\n    }\r\n    return <div>\r\n        <button disabled={ !remember||startValue < 0 || startValue === maxValue} onClick={remFunc} className={s.button} style={{background:'blueviolet'}}>Set</button>\r\n    </div>\r\n}\r\n","import {ChangeEvent, FC} from \"react\"\r\n\r\ntype MinType = {\r\n    start:number\r\n    setStart:(min:number)=>void\r\n    setRemember: (remember: boolean) => void\r\n    max:number\r\n}\r\n\r\nexport const StartValue:FC<MinType> = ({start,setStart,max,setRemember}) => {\r\n    const rememberFunc=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStart(+e.currentTarget.value)\r\n        setRemember(true)\r\n    }\r\n\r\n    return <div>\r\n        Start value <input type={'number'} style={{background:start<0||start===max||start>max?'rebeccapurple':'',borderColor:start<0||start===max||start>max?'red':''}} value={start} onChange={rememberFunc}/>\r\n    </div>\r\n}","import s from './CountBilder.module.css'\r\nimport {MaxValue} from \"./MaxValue\";\r\nimport {FC} from \"react\";\r\nimport {SetValue} from './SetValue';\r\nimport {StartValue} from \"./StartValue\";\r\n\r\ntype BuilderType = {\r\n    max: number\r\n    remember: boolean\r\n    setRemember: (remember: boolean) => void\r\n    setMax: (max: number) => void\r\n    start: number\r\n setValue:(value:number)=>void\r\n    setStart: (min: number) => void\r\n    value: number\r\n}\r\n\r\nexport const CountBuilder: FC<BuilderType> = ({max, setMax, start, setStart, setRemember,remember,setValue}) => {\r\n\r\n    return <div className={s.counterForm}>\r\n        <MaxValue setRemember={setRemember} remember={remember} max={max} setMax={setMax} min={start}/>\r\n        <StartValue setRemember={setRemember} start={start} setStart={setStart} max={max}/>\r\n        <SetValue  startValue={start} setStart={setStart} setMax={setMax} setValue={setValue} setRemember={setRemember} remember={remember} maxValue={max}/>\r\n    </div>\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter\";\nimport { CountBuilder} from './CountBilder';\n\nfunction App() {\n    const [value,setValue] = useState(0)\n    const [max,setMax] = useState(10)\n    const [start,setStart] = useState(0)\n    const [remember,setRemember] = useState(false)\n\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <CountBuilder value={value}  setValue={setValue} remember={remember} setRemember={setRemember} start={start} setStart={setStart} setMax={setMax} max={max} />\n          <Counter value={value} remember={remember} setValue={setValue} maxValue={max} startValue={start}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}